# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
name: $(date:yyyyMMdd)$(rev:.r)-$(SourceBranchName)
variables: 
    # Sln: $(System.DefaultWorkingDirectory)\Grundfos.GiC.Core.Gdp.Translator.sln
    # TranslatorCsproj: $(System.DefaultWorkingDirectory)/**/Grundfos.GiC.Core.Gdp.Translator.csproj
    PackageCsproj: $(System.DefaultWorkingDirectory)/**/*NugetPackage.csproj
    TestCsproj: $(System.DefaultWorkingDirectory)/**/*Test.csproj
    BuildConfiguration: "Release"
    Major: '0'
    Minor: '1'
    Patch: '1'
    buildVersion: $(Major).$(Minor).$(Patch)
    nugetVersion : $(buildVersion)-$(Build.SourceBranchName)
    #This is used if versions are used from the project files and not from the yaml script 
    # nugetSuffix: --version-suffix $(Build.SourceBranchName)

trigger:
- master

stages:
- stage: Build
  jobs:
  - job: 'Setversion'
    pool:
      vmImage: 'windows-2019'
    steps:
    - script: |
        echo '##vso[task.setvariable variable=nugetVersion]$(buildVersion)
      name: 'Set_Nuget_Version_To_Buildnumber_For_Master_Branch'
      condition: eq(variables['Build.SourceBranch'],'refs/heads/master')
    #in case this is a pull request define package version as a rc ( release candidate )
    - script: | 
        echo '##vso[task.setvariable variable=nugetVersion]$(buildVersion)-rc$(Build.BuildId)
      name: 'Set_Nuget_Version_To_Buildnumber_For_Pull_Requests'
      condition: ne(variables['Build.SourceBranch'],'refs/heads/master')

    - powershell: echo "##vso[task.setvariable variable=nugetVersion;isOutput=true]$(nugetVersion)"
      name: outputNugetVersion

    - bash: echo $(nugetVersion)
      displayName: 'Write nuget version from Windows'

  - job: 'Build'
    dependsOn:
    - Setversion
    condition: succeeded()
    pool:
      vmImage: 'ubuntu-16.04'

    variables:
      nugetVersion: $[ dependencies.Setversion.outputs['outputNugetVersion.nugetVersion'] ]

    steps:
    - bash: echo $(nugetVersion)
      displayName: 'Write nuget version from Linux'

    - task: DotNetCoreCLI@2
      displayName: 'Restore packages'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'build solution'
      inputs:
        command: 'build'
        projects: '**/*.sln'
        arguments: '--configuration $(BuildConfiguration) /p:PackageOutputPath=$(Build.ArtifactStagingDirectory) /p:PackageVersion=$(nugetVersion) /p:Version=$(buildVersion) /p:FileVersion=$(buildVersion)'

    - task: DotNetCoreCLI@2
      displayName: 'Run unit test(s)'
      inputs:
        command: 'test'
        projects: '**/Test.csproj'
        arguments: '--configuration $(BuildConfiguration)'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'pack'
        configuration: '$(BuildConfiguration)'
        packDirectory: $(Build.ArtifactStagingDirectory)
        nobuild: true
        packagesToPack: '$(PackageCsproj)'
        versioningScheme: byEnvVar
        versionEnvVar: nugetVersion

    - task: PublishBuildArtifacts@1  

# - stage: Deploy
#   jobs:
#   - job: Deploy
#     pool:
#       vmImage: 'ubuntu-latest'

#     steps:
#     - script: echo Running deployment
#       displayName: 'Deployment script'
