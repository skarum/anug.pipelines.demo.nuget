# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

name: $(date:yyyyMMdd)$(rev:.r)-$(SourceBranchName)

variables:
  Major: '0'
  Minor: '1'
  Patch: '1'
  BuildVersion: $(Major).$(Minor).$(Patch)
  NugetVersion : $(BuildVersion)-$(Build.SourceBranchName)
  BuildConfiguration: 'Release'
  PackageCsproj: $(System.DefaultWorkingDirectory)/**/*NugetPackage.csproj

trigger:
- master

stages:
- stage: build
  jobs:
  - job: SetVersion
    pool:
      vmImage: 'windows-2019'
    steps:
    - script: |
        echo '##vso[task.setvariable variable=nugetVersion]$(buildVersion)
      name: 'Set_Nuget_Version_To_Buildnumber_For_Master_Branch'
      displayName: 'Set NuGet version to buildnumber for master branch'
      condition: eq(variables['Build.SourceBranch'],'refs/heads/master')
      #in case this is a pull request define package version as a rc ( release candidate )
    - script: | 
        echo '##vso[task.setvariable variable=nugetVersion]$(buildVersion)-rc$(Build.BuildId)
      name: 'Set_Nuget_Version_To_Buildnumber_For_Pull_Requests'
      displayName: 'Set NuGet version to buildnumber for pull requests'
      condition: ne(variables['Build.SourceBranch'],'refs/heads/master')

    - powershell: echo "##vso[task.setvariable variable=nugetVersion;isOutput=true]$(nugetVersion)"
      name: outputNugetVersion
      displayName: 'Output Nuget version variable to use in next job'

    - bash: echo $(nugetVersion)
      displayName: 'Write nuget version from Windows'


  - job: Build

    pool:
      vmImage: 'ubuntu-latest'

    dependsOn:
    - Setversion
    condition: succeeded()
    
    variables:
      nugetVersion: $[ dependencies.Setversion.outputs['outputNugetVersion.nugetVersion'] ]

    steps:

    - bash: echo $(nugetVersion)
      displayName: 'Write nuget version from Linux'

    - task: DotNetCoreCLI@2
      displayName: 'Restore packages'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'
        feedsToUse: 'select'
        versioningScheme: 'off'
        arguments: '--configuration $(BuildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'Build projects'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        feedsToUse: 'select'
        versioningScheme: 'byEnvVar'
        versionEnvVar: 'BuildVersion'
        arguments: '--configuration $(BuildConfiguration) /p:PackageOutputPath=$(Build.ArtifactStagingDirectory) /p:PackageVersion=$(nugetVersion) /p:Version=$(buildVersion) /p:FileVersion=$(buildVersion)'

    - task: DotNetCoreCLI@2
      displayName: 'Run unit test(s)'
      inputs:
        command: 'test'
        projects: '**/Tests.csproj'
        arguments: '--configuration $(BuildConfiguration)'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'pack'
        configuration: $(BuildConfiguration)
        packDirectory: $(Build.ArtifactStagingDirectory)
        nobuild: true
        packagesToPack: '$(PackageCsproj)'
        versioningScheme: 'byEnvVar'
        versionEnvVar: 'NugetVersion'

    - task: PublishBuildArtifacts@1  