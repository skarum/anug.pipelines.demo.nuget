# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

name: $(date:yyyyMMdd)$(rev:.r)-$(SourceBranchName)

variables:
  Major: '0'
  Minor: '1'
  Patch: '1'
  BuildVersion: $(Major).$(Minor).$(Patch)
  NugetVersion : $(BuildVersion)-$(Build.SourceBranchName)
  BuildConfiguration: 'Release'
  PackageCsproj: $(System.DefaultWorkingDirectory)/**/*NugetPackage.csproj

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'

- task: DotNetCoreCLI@2
  displayName: 'Restore packages'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    feedsToUse: 'select'
    versioningScheme: 'off'
    configuration: $(BuildConfiguration)

- task: DotNetCoreCLI@2
  displayName: 'Build projects'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    feedsToUse: 'select'
    versioningScheme: 'byEnvVar'
    versionEnvVar: 'BuildVersion'
    configuration: $(BuildConfiguration)
    # arguments: '/p:PackageVersion=$(NugetVersion) /p:Version=$(BuildVersion) /p:FileVersion=$(BuildVersion)'

- task: DotNetCoreCLI@2
  displayName: 'Run unit test(s)'
  inputs:
    command: 'test'
    projects: '**/Tests.csproj'
    configuration: $(BuildConfiguration)

- task: DotNetCoreCLI@2
  inputs:
    command: 'pack'
    configuration: $(BuildConfiguration)
    packDirectory: $(Build.ArtifactStagingDirectory)
    nobuild: true
    packagesToPack: '$(PackageCsproj)'
    versioningScheme: 'byEnvVar'
    versionEnvVar: 'NugetVersion'